
            
            HTML - Hyper Text Markup Language
        -----------------------------------------

    1. Markup Language
    2. HTML - Elements
        - staring tag, content, ending tag
        ex : <tag attribute> content </tag>
    3. Basic Structure of HTML
        <html>
            <head> <title>title</tile> </head>
            <body> content to display in browser </body>
        </html>
    4. HTML 5 version
    5. Basic Tags - used to display content in browser
        - Heading : h1,h2,h3,h4,h5,h6
        - Paragraph : p tag
        - Text Formatting :
            - bold : b tag
            - itallics : em tag / i tag
            - highlight : mark tag
            - strike : s tag
            - superscript : sup tag
            - subscript : sub tag
        - link : a tag
        - list :
            - Ordered List : ol tag, list content - li tag
            - Unorder List : ul tag, list content - li tag
            - Description/Definition list : dl tag , dt tag , dd tag
        - Table :
            - table tag, thead tag, tbody tag, tr tag, th tag, td tag
        - image : img tag, - src, alt, width, height
        - video : video tag , controls, src
        - iframe tag : embed content available other webpage to our page
        - hr tag : display horizontal line
        - marquee tag : display moving contents
        - Container tags : 
            - div tag, section tag, article tag
        - Form : used to input user data
            - input tag : different type are - text, number, password, radio, date, checkbox, file, button
            - textArea tag
            - button 
        - icon : 
    6. Based on tag display in browser
        - Block Elements : h1-h6, p
        - Inline Elements : b
    7. Semantic Tags 
        - header tag
        - section tag 
        - aside tag
        - footer tag           
            
            
            --------- CSS - Cascading Style Sheet ------------
        
        1. Style HTML Elements
        2. Different ways apply CSS in HTML
            - Inline CSS : using 'style' attribute 
                - syntax : style="property:value;"
            - Internal CSS : using 'style tag'
                - syntax : <style> css-selector{ property:value; } </style>
            - External CSS : style will define in an External css file, link the css file with HTML page
                - syntax : css-selector { property:value; } 
        3. CSS Selectors : used to select html elements in CSS
            - Using tag name
            - Using id
            - Using Class
            - Using Universal selector
            - Using Grouping selector (comma)
            - Using CSS Combinators
                - Using Descendant Selector (space)
                - Using Child Selector (>) 
                - Using Adjascent Sibling Selector (+) 
                - Using Genaral Siblings Selector (~) 
        4. Box Model : 
            - margin
            - border
            - padding
        5. CSS Properties
            - Float
            - FlexBox : to arrange items in row and column
                - Flex container : display set as flex
                - justify content
                - align items
                - flex direction 
                - flex warp
            - Position 
                - static
                - relative
                - absolute
                - fixed
                - sticky
            - z-index : 
            - Grid : to arrange items in row and column
                - grid-template-columns : defines the number of columns in your grid layout, and it can define the width of each column.
                - grid-template-rows : property defines the height of each row.
                - justify-content : property is used to align the whole grid inside the container.
                - align-content : property is used to vertically align the whole grid inside the container.
        6. Pseudo-class : is used to define a special state of an element.
            - selector:pseudo-class {   property: value; }
        7. Linear Gradient : used to apply combination of colors as background
            - background-image: linear-gradient(direction, color-stop1, color-stop2, ...);
        8. Animation : to define use Keyframes
            - Predefined Animation Library
                - animate.style : https://animate.style/
                - aos Animation
                - Locomotive scroll
        9. Responsive Website design 
            - Media Queries : @media
                - width and height of the viewport
                - orientation of the viewport (landscape or portrait)
                - resolution

            --------- Bootstrap - Framework of CSS ------------

    1. Build fast, responsive sites
    2. Prdefined class of style, to apply Bootstrap style to an html element, apply it as its class
        - container/container-fluid : used to provide margin left and right
        - m/mt/mb/ms/me-1/2/3/4/5 : used to margin
        - border 
        - success/danger/warning/secondary/dark/light/primary/info : 
        - text-color-name
        - p/pt/pb/ps/pe-1/2/3/4/5 : used to padding
        - img-fluid
        - w-25/50/75/100
        - d-flex
    3. Grid system

    --------- FIGMA ------------
    1. Design using FIGMA
    2. developing webpage using figma file

    --------- JavaScript - Dynamically Programmed Language ------------

    1. NODE JS : It Provides runtime environment for JS
    2. Basic Concepts in JS
        - Display content : console.log(content)
        - Data types in JS : use typeof
            - string
            - number 
            - boolean
            - object
        - Identifiers : set of rules for setting Variable name
        - Variables : used to store values
            - var keyword
            - const keyword
            - let keyword
        - Hoisting : moving declarations to the top.
        - Difference between var , const and let keywords
        ----------var--------  -----------const-------------  ----------let----------------
        1. use var keyword          use const keyword           use let keyword
        2. can reassign value       cannot reassign value       can reassign value
        3. Global scope             Block scope                 Block scope
        4. Hoisted with undefined   Hoisted without value       Hoisted without value
        - Combinig diffrenet types of data in JS
            - using commas
            - using + (concantenation) : it convert the content into string
            - using `(back tick - template literals) 
        - Operators in JS
            - Assignment Operators : =
            - Arithmetic Operators : + - * / % ** return a number
            - Relational Operators : > >= < <= == != === it returns boolean 
            - Logical Operators : && || ! 
                        &&              ||              !
                    T && T = T      T || T = T         !T = F
                    T && F = F      T || F = T         !F = T
                    F && T = F      F || T = T
                    F && F = F      F || F = F 
            - Increment/Decremnt Operators : ++ / -- 
            - ShortHand Operators : += -= *= 
            - Ternary Operators : condition ? Statements executed when conditon become true : Statements executed when conditon become false
            - Truthy Operators : condition && Statements executed when conditon become true
            - Spread Operator : used (...) to expand an iterating variable to a single iterating variable
            - REST Operator : used (...) to combine rest of the data to a single array
        - Descision making / conditional Statements
            - if Statements : 
                - syntax : if(conditon){ Statements executed when conditon become true }
            - if-else Statements :
                - syntax : if(conditon){ Statements executed when conditon become true }else{ Statements executed when conditon become false }
            - else if Ladder : multiple condition are checking
            - switch : switch(condition){ case an1: step, break; }
        - Looping Statements : used to execute same task in multiple times 
            - while loop 
                - syntax :  1. initialise a Variable
                            2. while (condition using the same Variable) {
                                loop body execute when condition become true
                            3. change Variable that used in the while condition
                            }
            - for loop 
                - syntax : for(initialise a Variable;condition using the same Variable;change Variable that used in the condition){
                    loop body execute when condition become true
                }
                - break Statements : 
                - continue Statements :
            - Nested loop : A loop inside another loop
                - for(initialise;condition;change){ // outer loop
                    for(initialise;condition;change){ //inner loop
                        //inner loop executes complete first
                    }
                }
        - Functions : used to perform a specific task in coding
            - function Definition 
                - syntax : function function-name(par1,par2...){
                    task Definition
                }
            - Function call
                - syntax : function-name(arg1, arg2...argn)
            - return Statements : used to return data from function Definition to function call
            - Types of Functions
                - Arrow function : alternative of a function Definition
                    syntax : function-name = (par1,par2...)=>{function body}
                - Predefined functions : Math.floor(), console.log()
                - Callback function : A function Definition inside another function call
                    - function-name(function name({  }))
                - Anonymous function : nameless function are self executing function
                - Recursive function : Calling a function inside its own Definition
                - Nested function :  Defining a function  inside another function Definition
                - clossure : is a function having access to the parent scope from a child
                - currying function : used to transform the function of multiple arguments into several functions of a single argument
        - Array : used to store multiple values inside single Variable
                - type of array : object
                - total items in an array : array-name.length
                - index : to access item from an array, starts from 0
                - Common Array Methods
                    - push(item) : insert data at end of an array
                    - unshift(item) : insert data at starting of an array
                    - pop() : delete last item of an array
                    - shift() : delete first item of an array
                    - sort(comfunction) : used to sort / rearrange existing array
                    - forEach(Callback function) : similar to for-of loop
                    - filter(Callback function) : create a new array with elements satisfying the condition applied using a function in the existing array
                    - map(Callback function) : create a new array with elements appling mapping function in the existing array
                    - find(Callback function) : return an existing array item  satisfying the condition applied using a function in the existing array
                    - reduce(callback function) : return  a single value (sum/highest/lowest), after applying a reducer function to an existing array
                        - to perform arithmetic Operation in reduce function then reduce must apply to the array containin only numbers
                    - reduceRight(callback function) : return  a first value (highest/lowest), after applying a reducer function to an existing array
                    - some(callback-function) : return a boolean value (true/false) based on condition applied using a function in the existing array
                    - flat(depth/Infinity) : Returns a new array with all sub-array elements concatenated into it recursively up to the specified depth. return one dimensional array if flat method argument is 'Infinity'
                    - includes(item) : return a boolean value (true/false) based on the item present in the existing array
                    - indexOf(item) : return index corresponding to that item, if item not present then it return -1 as its index
                    - splice(start,deleteCount) : used to delete  / replace a specific item from an array and it returns a new array with deleted items
                    - join(seperator) : used to join array items seperated by the seperator given in the join function and return it as a string
                    - reverse()  : Reverses the elements in an array in place. This method mutates the array and returns a reference to the same array.
                - Array.from(iterating-Variable) : used to convert an iterating Variable to an array
        - String : zero or more characters written inside quotes
                - String Methods 
                    - toLowerCase() : used to convert to lowercase
                    - toUpperCase() : used to convert to uppercase
                    - startsWith(data) : return boolean based on the string start with the given data
                    - endsWith(data) : return boolean based on the string ends with the given data
                    - trim() : to avoid unwanted white spaces either from start/ending of a string
                    - includes(data) : return boolean based on the given data in present in the string
                    - split(seperator) : return array with items seperated by the seperator given in the function after applying the given string
                    - slice(start,ending)
                    - substring()
                - eval(string-expression) : used to evaluate string expression
        - Object : Data type used to store multiple datas in a single variable, data will be stored as {key:value} pair in an object
                - access values from an object : use key, object-name["key-name"] / object-name.key
                - insert value to an existing object : object-name["key-name"] = value / object-name.key = value
                    - Object.assign(target-object,source) : used to insert dat into an object
                - To check a key is available in an object : use 'in' Operator , object-name.hasOwnProperty("key") it return a boolean value based on the availability of the key in the object
                - Object.values(object-name) : return an array with  all values of an object 
                - Object.keys(object-name) : return an array with  all keys of an object 
                - delete a key from an object : delete object-name.keyname
        - Exceptions (Runtime Errors) handling :  try-catch block

    --------- OOPs : Object Oriented Programming ------------

    1. Basic Fundamental in OOPs
        - Class : Blue print of Object, 'property' as well as some 'functions'
        - Object : Real world entity 
            - object for class used to access class properties and methods outside the class
                - new class-name()  : used to create object for a class, and constructor method will get executed automatically
                - constructor is used to initialise class properties
        - Reference : used to connect class with its objects
        - Defining scope for properties
            - Private
            - Public
            - Protected
    2. Features of OOPs
        - Inheritance : 
            - Classical Inheritance : use 'extends' keyword
            - Prototype Inheritance : use '__proto__' keyword
        - Polymorphism : use REST Operators to implemnet it in JS
        - Abstraction : Hiding Important data from users
        - Encapsulation : Data stored in another data

        

    --------- JavaScript - Front End Technology ------------

    - Used to provide behaviour to the html elements according to user action
    - How can we apply js in HTML
        - Internal JS : use script tag 
        - External JS : use External js file and link the js with html using script tag
    - DOM (Document Object Model) is a hierarchical representation (tree structure) of HTML documents. It defines the structure and properties of elements on a webpage, enabling JavaScript to dynamically access, manipulate, and update content, enhancing interactivity and functionality.
    - DOM Methods : How to select/access HTML elements to JS
        - using html tag name : document.getElementByTagName('tag-name')
        - using class name : document.getElementByClassName('class-name')
        - using id : document.getElementById('id') / id
        - using querySelector : document.querySelector('tag/.class/#id')
        - using querySelectorAll : document.querySelectorAll('tag/.class/#id')
    - Events : are triggererd by user action
        - Mouse Related Events : click, hover, drag...
        - Keyboard Related Events : key press down, key up...
        - Touch based Events
    - Access / Update content of a tag
        - innerHTML
        - innerText
    - Permanently Storing Data in webpage / Browser
        - Local Storage : data stored as key and value and both should be in string
            - to store data : setItem(key,value)
            - to get/access data : getItem(key)
            - to remove data : removeItem(key)
        - Session Storage : data stored as key and value and both should be in string
    - API : Application Programming Interface - used to commmunicate application in internet
        - URL : Uniform Resource Locator, ex: https://jsonplaceholder.typicode.com/users/1
            - baseURL : https://jsonplaceholder.typicode.com
        - URI : Uniform Resource Identifiers , ex : /users
        - Path Parameter : values along with a URL , ex: 1
        - Query Parameter : values along with a ? in URL
        - Body Parameter : values along the request body
        - Based on communication between 2 application we can classify API into different category
            - Types of API Architecture
                - REST API : HTTP Request, JSON Data
                - SOAP API : HTTP request , XML Data
                - GRAPHL
        - JSON : JavaScript Object Notation - format in which data is shared between different application in internet
            -  data stored as key and value pair : {'key':value} , here type of key must be string
        - HTTP (Hyper Text Transfer Protocol)
            - HTTP Request : have 2 parts
                - HTTP Header part : used to hold secret / more secure data
                - HTTP Body part : used to share data from one application to another, data format must be JSON
            - Request can be of different types
                - GET Request : used to read / get  data from another application
                - POST Request : used to store data from one application to another
                - PUT request : used to complete edit existing data from an application
                - PATCH request : used to partially edit existing data from an application
                - DELETE request : used to remove data from one application
            - HTTP Response : Response for HTTP request, it can be of different type, they are disguished by its 'status code' 
                - 1xx : Informational
                - 2xx : success
                - 3xx : Redirectional 
                - 4xx : client Errors
                - 5xx : Server Errors
    - Resolving function call in JavaScript
        - Types of function : to handle function call js uses a single call stack, so its konwn as Single threaded Programming
            - Synchronous function : function without delay
            - Asynchronous function : function with delay
                - Callback function : holds in callback queue
                - API call : holds in microtask/priority queue
        - Handling Asynchronous function in JS
            - Callback : nesting of callback leads to 'callback hell'
            - Promise : every promise has 2 states
                - resolved state : response for the request, to get resolved response promise has to use 'then' method
                - reject state : we wont get any response for request , to resolve reject state promise has 'catch' method
                - pending state : waiting time during making an Asynchronous function call
                - async - await keywords : resolve promise without using callbacks
                    - set async keyword to a function , so that we can use 'await' keyword in an Asynchronous call which return promise
        - API Call Handling in JS
            - using XMLHTTPRequest class / AJAX (Asynchronous JavaScript XML)
            - using fetch method : based on promise
            - use axios library : based on promise
